rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner() {
      return request.auth.uid == resource.data.userId;
    }

    function isFutureOwner() {
      return request.auth.uid == request.resource.data.userId;
    }

    function onlyHasAttrs(obj, attrs) {
      return obj.keys().hasOnly(attrs);
    }

    function incoming() {
      return request.resource.data;
    }

    function isMissingOrMap(key) {
      return !(key in incoming().keys()) || incoming()[key] is map;
    }

    // -------------------------- RULES --------------------------

    match /{document=**} {
      allow read: if isOwner() || resource == null;
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    match /training-blocks/{trainingBlockId} {
      function isCorrectSchema() {
        return onlyHasAttrs(request.resource.data, ['userId', 'name', 'exerciseDayOrdering'])
            && incoming().name is string
            && isMissingOrMap('exerciseDayOrdering');
      }

      allow create: if isFutureOwner() && isCorrectSchema();
      allow update: if isOwner() && isCorrectSchema();
    }

    match /exercise-days/{exerciseDayId} {
      function isCorrectSchema() {
        return onlyHasAttrs(request.resource.data, ['userId', 'name', 'trainingBlockId'])
            && incoming().name is string
            && incoming().trainingBlockId is string;
      }

      allow create: if isFutureOwner() && isCorrectSchema();
      allow update: if isOwner() && isCorrectSchema();
    }

    match /exercises/{exerciseId} {
      function isCorrectSchema() {
        return onlyHasAttrs(request.resource.data, ['userId', 'placement', 'exerciseDayId', 'exerciseTypeId', 'sets'])
            && incoming().placement is int
            && incoming().exerciseDayId is string
            && incoming().exerciseTypeId is string
            && incoming().sets is list;
      }

      allow create: if isFutureOwner() && isCorrectSchema();
      allow update: if isOwner() && isCorrectSchema();
    }

    match /exercise-types/{exerciseTypeId} {
      function isCorrectSchema() {
        return onlyHasAttrs(request.resource.data, ['userId', 'name', 'unit'])
            && incoming().name is string
            && incoming().unit is string
      }

      allow create: if isFutureOwner() && isCorrectSchema();
      allow update: if isOwner() && isCorrectSchema();
    }

    match /orderings/{orderingId} {
      function isCorrectSchema() {
        return onlyHasAttrs(request.resource.data, ['userId', 'ordering'])
            && incoming().ordering is map
      }

      allow create: if isFutureOwner() && isCorrectSchema();
      allow update: if isOwner() && isCorrectSchema();
    }
  }
}
